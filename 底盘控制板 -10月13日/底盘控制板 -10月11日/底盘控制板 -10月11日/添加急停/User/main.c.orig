#include "stm32f10x.h"  // Device header
#include "freertos.h"
#include "task.h"

#include "stdarg.h" 
#include "stdio.h"
#include "stdlib.h"
#include "string.h"

#include "Delay.h"
#include "LED.h"
#include "usart.h"

#include "HallEncoder.h"
#include "Key.h"
#include "OLED.h"
#include "PWM.h"
#include "Servo.h"

#include "tcs34725.h"
#include "timer.h"

#include "rc522_config.h"
#include "rc522_function.h"

#include "VL6180.h"

#define pi 			3.14
#define Encoder_N	28	//每圈脉冲数
#define Encoder_K	100	//齿比
#define FRE			200	//采样频率（Hz）
#define Wheel_spacing	0.12
//TaskHandle_t  motion_handler;//任务句柄
//TaskHandle_t  basic_handler;//任务句柄
//TaskHandle_t  MPU_handler;//任务句柄
//TaskHandle_t  Master_handler;//任务句柄
//TaskHandle_t  Slave_handler;//任务句柄
//TaskHandle_t  Mission_handler_handler;//任务句柄
//TaskHandle_t  Key_handler;//任务句柄
TaskHandle_t  tcs_handler;//颜色传感器任务句柄
TaskHandle_t  rcc_handler;//读卡器任务句柄
TaskHandle_t  LeftLazer_handler;//激光传感器句柄

//void motion_task(void *pvParameters);//函数声明
//void basic_task(void *pvParameters);
//void MPU_task(void *pvParameters);
//void Master_task(void *pvParameters);
//void Slave_task(void *pvParameters);
//void Mission_handler(void *pvParameters);
//void Key_task(void *pvParameters);
void tcs_task(void *pvParameters);
void rcc_task(void *pvParameters);
void LeftLazer_task(void *pvParameters);



COLOR_RGBC rgb;
COLOR_HSL  hsl;
//颜色传感器rgb的结构体
typedef struct 
{
const char* name;
int r, g, b;
} Color;
//颜色传感器hsl的结构体
typedef struct {
const char* name1;
int h, s, l;
} Color1;

int previous_color ;

//读卡器  
unsigned char status,Result;
unsigned int temp,i;
unsigned char  data1[16] = {0x12,0x34,0x56,0x78,0xED,0xCB,0xA9,0x87,0x12,0x34,0x56,0x78,0x04,~0x04,0x04,~0x04};
unsigned char  data2[4]  = {0,0,0,1};
unsigned char  DefaultKey[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}; 
unsigned char g_ucTempbuf[20]; 


#define N1 5
#define N2 5
#define N3 5
uint16_t filter1(uint16_t x) 
{
    static uint16_t buffer[N1] = {0};
    static uint16_t sum = 0;
    static int ptr = 0;
    sum = sum - buffer[ptr] + x;
    buffer[ptr] = x;
    ptr = (ptr + 1) % N1;
    return sum / N1;
}
uint16_t filter2(uint16_t x) 
{
    static uint16_t buffer[N2] = {0};
    static uint16_t sum = 0;
    static int ptr = 0;
    sum = sum - buffer[ptr] + x;
    buffer[ptr] = x;
    ptr = (ptr + 1) % N2;
    return sum / N2;
}
uint16_t filter3(uint16_t x) 
{
    static uint16_t buffer[N3] = {0};
    static uint16_t sum = 0;
    static int ptr = 0;
    sum = sum - buffer[ptr] + x;
    buffer[ptr] = x;
    ptr = (ptr + 1) % N3;
    return sum / N3;
}


typedef struct//激光结构体
{
	int16_t Front;
	int16_t Side_Front;
	int16_t Side_Back;
	int16_t Side_Front_Offset;
	int16_t Side_Back_Offset;
	int16_t Side_Average;
	int16_t Factor;
}Lazer_Structure;
Lazer_Structure Lazer;

typedef struct//欧拉角结构体
{

int16_t aacz,yaw,GYO;				//偏航角
int16_t yaw_offset;	//校准值
int16_t yaw_Target;	//校准值
uint8_t yaw_offset_get;	
int16_t err;
int16_t adjust;
int16_t adjusterr;
}Euler_Structure;
Euler_Structure Euler;

typedef struct//MISSION结构体
{
	uint8_t Remote_Flag;//是否有遥控介入
	uint8_t state;
	uint8_t num;
	uint8_t VZ_lock;
	uint8_t timer;
	float parameter1;
	int16_t parameter2;
	int16_t parameter3;
}Mission_Structure;
Mission_Structure Mission;

//typedef struct//激光结构体
//{
//	int16_t Front;
//	int16_t Side_Front;
//	int16_t Side_Back;
//	int16_t Side_Average;
//	int16_t Factor;
//}Lazer_Structure;
//Lazer_Structure Lazer;
	
typedef struct//底盘状态结构体
{
	int16_t PulseA;int16_t PulseB;
	float SpeedA;float SpeedB;
	float TargetA;float TargetB;
	float Vx;float Vz;
	float VxTarget;float VyTarget;float VzTarget;
	float VxFilter;
	float Adjust;
	uint16_t Angle;
}Car_Motion_Structure;
Car_Motion_Structure Car_Motion;

extern uint8_t _OUTPUT_USART;		//用于print的串口号

typedef struct//串口结构体
{
	uint8_t Rx_String_Copy[50];
	char * Rx_cut;
//	int16_t Buf[3];
//	float F_Buf[3];
	uint8_t Rx_Check;
	uint8_t RX_OK;
	uint8_t Rx_String[50];    			//接收字符串数组
	uint8_t Rx_Flag;         			//接收字符串计数
	uint8_t Rx_buff;     				//接收缓存
}Rx_Structure;
Rx_Structure MPU;
Rx_Structure Master;
Rx_Structure Slave;

uint8_t Light_Switch = 1;
uint8_t Servo_Angle = 90;


void Mission_manager(uint16_t NUM,float SPEED,uint16_t PA,uint16_t PB);





float target_limit_float(float insert,float low,float high)//浮点数限幅
{
    if (insert < low)
        return low;
    else if (insert > high)
        return high;
    else
        return insert;	
}

void Set_Pwm(int motor_a,int motor_b)//电机正反转控制
{
	if(motor_a>7200)motor_a=7200;
	if(motor_a<-7200)motor_a=-7200;
	if(motor_b>7200)motor_b=7200;
	if(motor_b<-7200)motor_b=-7200;
	if(motor_a>0)	{TIM_SetCompare3(TIM3,motor_a);TIM_SetCompare4(TIM3,0);}
	else 	        {TIM_SetCompare4(TIM3,-motor_a);TIM_SetCompare3(TIM3,0);}
	if(motor_b>0)	{TIM_SetCompare1(TIM3,motor_b);TIM_SetCompare2(TIM3,0);}
	else 	        {TIM_SetCompare2(TIM3,-motor_b);TIM_SetCompare1(TIM3,0);}
}
void Speed_Get(void)//获取编码器的原始数据
{	
	Car_Motion.PulseA = -Conter1_Get();
	Car_Motion.PulseB = Conter2_Get();

	Car_Motion.SpeedA = Car_Motion.PulseA * FRE * (pi * 0.044) / Encoder_N / Encoder_K;
	Car_Motion.SpeedB = Car_Motion.PulseB * FRE * (pi * 0.044) / Encoder_N / Encoder_K;
}
void Speed_Cul(void)//解算车轮目标速度
{	
	static uint16_t Filter_Divider;
	float omega;
	omega = Car_Motion.VzTarget;	
	
	Filter_Divider ++;
	if(Filter_Divider >= 20)//10HZ
	{
		Filter_Divider = 0;
		
		Car_Motion.VxFilter += (Car_Motion.VxTarget - Car_Motion.VxFilter)*0.8f;
	}
	
	Car_Motion.TargetA = Car_Motion.VxFilter-omega*(Wheel_spacing/2);
	Car_Motion.TargetB = Car_Motion.VxFilter+omega*(Wheel_spacing/2);
}
void PID_Set(void)//PID控制轮速
{
	float ErrA,ErrB;
	static float P=40000,I=600,Q=10000;//P=10000,I=300;
	static float INA,INB,Range = 10;
	int16_t PWMA,PWMB;
	
	ErrA = Car_Motion.TargetA - Car_Motion.SpeedA;
	ErrB = Car_Motion.TargetB - Car_Motion.SpeedB;

	if((ErrA<0.01)&&(ErrA>-0.01))ErrA=0;
	if((ErrB<0.01)&&(ErrB>-0.01))ErrB=0;

	INA += ErrA*5;INB += ErrB*5;
	
	if(INA>Range){INA=Range;}else if(INA<-Range){INA=-Range;}
	if(INB>Range){INB=Range;}else if(INB<-Range){INB=-Range;}
	
	if((Car_Motion.TargetA < 0.01f)&&(Car_Motion.TargetA > -0.01f)){INA = 0;}
	if((Car_Motion.TargetB < 0.01f)&&(Car_Motion.TargetB > -0.01f)){INB = 0;}

	PWMA = P * ErrA + I * INA + Q * ErrA;//PWMA_offset;
	PWMB = P * ErrB + I * INB + Q * ErrB;//PWMB_offset;
	
	if(PWMA>6000){PWMA=6000;}else if(PWMA<-6000){PWMA=-6000;}
	if(PWMB>6000){PWMB=6000;}else if(PWMB<-6000){PWMB=-6000;}

	Set_Pwm(-PWMA,-PWMB);
}
void RealSpeed(void)
{
	Car_Motion.Vx = (Car_Motion.SpeedA+Car_Motion.SpeedB)/2.0f;
	Car_Motion.Vz = (Car_Motion.SpeedA-Car_Motion.SpeedB)/Wheel_spacing;
}

void User_Init()
{
//	delay_ms(1);//1000
	//printf("0\r\n");
//	LED_Init();
//	PWM_Init();
//	Key_Init();
//	Hal01_Init();
//	Hal02_Init();	
	//printf("1\r\n");
	Serial_Init();
	TCS34725_Init();

	TIM3_Int_Init(999,71); 
	RC522_Init();
	RC522_SPI_Config ();

	VL6180X_Init(3);
	VL6180X_Init(1);

	
//	Servo_Init();
//	Servo_SetAngle(90);
//	OLED_Init();
//	Light(4);
//	OLED_ShowString(0,0,"Waiting for senser");
//	
//	delay_ms(1500);
//	
//	OLED_ShowString(0,0,"AIPC IS READY!    ");
//	OLED_ShowString(0,1,"Vx = ");
//	OLED_ShowString(0,2,"Vz = ");
//	OLED_ShowString(0,3,"YAW = ");
//	
}
void Value_init()
{
	Mission.Remote_Flag = 0;
	Mission.num = 0;
	Mission.state = 0;
	Euler.yaw = 0;
	Euler.yaw_offset = 0;
	Euler.yaw_offset_get = 0;
	Euler.adjust = 0;
	Euler.yaw_Target = 0;
//	Car_Motion.VxTarget = 0.10;
//	Car_Motion.VzTarget = 1.57;
//	Mission.state = 1;
//	Mission.num = 1;
}
int main()
{
	User_Init();
//	Value_init();
	
//	xTaskCreate( motion_task,"motion_task",256,NULL,4,&motion_handler );
//	xTaskCreate( basic_task,"basic_task",128,NULL,1,&basic_handler );
//	xTaskCreate( MPU_task,"MPU_task",256,NULL,3,&MPU_handler );
//	xTaskCreate( Master_task,"Master_task",128,NULL,2,&Master_handler );
//	xTaskCreate( Slave_task,"Slave_task",256,NULL,2,&Slave_handler );
//	xTaskCreate( Key_task,"Key_task",128,NULL,1,&Key_handler );	
//	xTaskCreate( Mission_handler,"Mission_handler",256,NULL,2,&Mission_handler_handler);
	xTaskCreate( tcs_task,"tcs_task",128,NULL,1,&tcs_handler );
	xTaskCreate( rcc_task,"rcc_task", 128,NULL,1,&rcc_handler );
	xTaskCreate( LeftLazer_task,"LeftLazer_task",256,NULL,1,&LeftLazer_handler );	
	
	
	vTaskStartScheduler(); //开始调度
}

void motion_task(void *pvParameters)
{
	while(1)
	{
		Speed_Get();
		Speed_Cul();
		PID_Set();
		RealSpeed();
		vTaskDelay(5);
	}
}

void MPU_task(void *pvParameters)
{
	float Alpha;
//	int16_t err;
	static int errI;
	static int Lasterr;
	float Angle_P,Angle_I,Angle_D,Angle_Q = 0.001;//const float Angle_P = 0.0006f,Angle_I = 0.00004f,Angle_D = 0;
	//yaw_offset += Car_Motion.VzTarget * 104			;// / 100 * 180 / pi * 65535/360;	
	while(1)
	{
		if(!Mission.Remote_Flag)
		{

			Euler.err = Euler.yaw_offset - Euler.yaw - Euler.yaw_Target;
			
			Euler.adjusterr = Euler.err - Euler.adjust;
			
			errI += Euler.adjusterr *4 ;
			errI = target_limit_float(errI,-5000,5000);	
			
			Alpha = 0;
			if((Car_Motion.Vx < 0.02) && (Car_Motion.Vx > -0.02))//(Angle_Adjustment_ON == 1)
			{
				Angle_P = 0.0006;Angle_I = 0.00006;Angle_D = -0.00006;//静止
			}
			else
			{
				Angle_P = 0.0004;Angle_I = 0.00004;Angle_D = -0.00004;//运动
			}
			if((Euler.adjusterr < 300) && (Euler.adjusterr > -300))
			{
				errI = 0;
			}
//			if((Euler.adjusterr >= 50) || (Euler.adjusterr <= -50))
//			{
				Alpha = Euler.adjusterr * Angle_P + errI * Angle_I + (Euler.adjusterr - Lasterr) * Angle_D;// + errI * Angle_Q;
				Alpha = target_limit_float(Alpha, -1,1);
				Lasterr = Euler.adjusterr;
				Car_Motion.VzTarget = Alpha;
	//			else if(Angle_Adjustment_ON == 1)//原地转
	//			{
	//				if(err>2500)
	//				{Car_Motion.VzTarget = 0.60;}
	//				else if(err>1600)
	//				{Car_Motion.VzTarget = 0.40;}
	//				else if(err>800)
	//				{Car_Motion.VzTarget = 0.25;}
	//				else if(err>60)
	//				{Car_Motion.VzTarget = 0.12;}
	//				
	//				if(err<-2500)
	//				{Car_Motion.VzTarget = -0.60;}
	//				else if(err<-1600)
	//				{Car_Motion.VzTarget = -0.40;}
	//				else if(err<-800)
	//				{Car_Motion.VzTarget = -0.25;}
	//				else if(err<-60)
	//				{Car_Motion.VzTarget = -0.12;}
	//					
	//			}
//			}
//			else
//			{
//				Car_Motion.VzTarget = 0;
//			}
		}
		vTaskDelay(10);
	}
}
void Slave_task(void *pvParameters)
{
	while(1)
	{
		if(Slave.RX_OK)
		{
			uint16_t BUFFER[3];
			Slave.Rx_cut = strtok(Slave.Rx_String_Copy, "|");
			Slave.Rx_cut = strtok(NULL, "|");
			
			if(Slave.Rx_cut[0] == 'A')
			{
				Slave.Rx_cut = strtok(NULL, "|");
				BUFFER[0] = atoi(Slave.Rx_cut);
				Slave.Rx_cut = strtok(NULL, "|");
				BUFFER[1] = atoi(Slave.Rx_cut);
				Slave.Rx_cut = strtok(NULL, "|");
				BUFFER[2] = atoi(Slave.Rx_cut);
				Lazer.Side_Average = (Lazer.Side_Front + Lazer.Side_Back) / 2;
				if(BUFFER[0] >= 500){BUFFER[0] = 500;}
				if(BUFFER[1] >= 200){BUFFER[1] = 200;}
				if(BUFFER[2] >= 200){BUFFER[2] = 200;}
				
				Lazer.Front = BUFFER[0];
				Lazer.Side_Front = BUFFER[1];
				Lazer.Side_Back = BUFFER[2];
			}
			
		}
		Slave.RX_OK = 0;
		vTaskDelay(1);
	}
}
void Master_task(void *pvParameters)
{
	while(1)
	{
		if(Master.RX_OK)
		{
			uint16_t BUF;
			float BUF_SPEED;
			uint16_t BUF_A,BUF_B;
			
			Master.Rx_cut = strtok(Master.Rx_String_Copy, "|");
			Master.Rx_cut = strtok(NULL, "|");
			BUF = atoi(Master.Rx_cut);
			if(BUF == 66)
			{
				Mission.Remote_Flag = 1;
				Master.Rx_cut = strtok(NULL, "|");
				Car_Motion.VxTarget = atof(Master.Rx_cut);
				Master.Rx_cut = strtok(NULL, "|");
				Car_Motion.VyTarget = atof(Master.Rx_cut);
				Master.Rx_cut = strtok(NULL, "|");
				Car_Motion.VzTarget = atof(Master.Rx_cut);				
			}
			else
			{
				Mission.Remote_Flag = 0;
				Master.Rx_cut = strtok(NULL, "|");
				BUF_SPEED = atoi(Master.Rx_cut);
				Master.Rx_cut = strtok(NULL, "|");
				BUF_A = atoi(Master.Rx_cut);
				Master.Rx_cut = strtok(NULL, "|");
				BUF_B = atoi(Master.Rx_cut);
				Mission_manager(BUF,BUF_SPEED,BUF_A,BUF_B);
			}
		}
		Master.RX_OK = 0;
		vTaskDelay(1);
	}
}

void Mission_manager(uint16_t NUM,float SPEED,uint16_t PA,uint16_t PB)
{
	if(Mission.state == 0)
	{
		
		Mission.num = NUM;
		Mission.parameter1 = SPEED;
		Mission.parameter2 = PA;
		Mission.parameter3 = PB;
		Mission.state = 1;
		printf("GOT\n");
	}
	else
	{
		printf("UNGOT\n");
	}
	
}

void Mission_handler(void *pvParameters)
{
//10ms检查一次任务请求及完成情况
//	static uint16_t SPEEDUP_COUNTER = 0;
	while(1)
	{
//		SPEEDUP_COUNTER ++;
		if(Mission.num == 1)
		{
			int16_t Front_DIS;
			int16_t LEFT_DIS;
			//直行对正
			//parameter1：对正最大速度
			//parameter2：前方停止距离
			//parameter3：中心死区宽度
			Front_DIS = Lazer.Front - Mission.parameter2;
			if((Euler.err <500) && (Euler.err >-500))
			{
				LEFT_DIS = Lazer.Side_Average - 60;
				
				if((Front_DIS >= 100) && Lazer.Side_Front < 160 && Lazer.Side_Back < 160)//如果未靠近目标(不包括负距离)
				{
					if((LEFT_DIS < -Mission.parameter3) || (LEFT_DIS > Mission.parameter3))//如果偏离大
					{
						Car_Motion.VxTarget = 0;
						while(Car_Motion.Vx > 0.01){;}
							
						if(LEFT_DIS < 0){Euler.adjust = 2500;}//左偏
						else{Euler.adjust = -2500;}//右偏
						vTaskDelay(200);
						while((Euler.adjusterr >500) || (Euler.adjusterr <-500)){;}
							
						Car_Motion.VxTarget = 0.05;
						vTaskDelay(1000);
						Car_Motion.VxTarget = 0;
						while(Car_Motion.Vx > 0.01){;}	
							
						Euler.adjust = 0;
						vTaskDelay(200);	
						while((Euler.adjusterr >500) || (Euler.adjusterr <-500)){;}
						
						goto line1;
					}
					else if((LEFT_DIS < -Mission.parameter3 / 2) || (LEFT_DIS > Mission.parameter3 / 2))//如果偏离小
					{
						if(LEFT_DIS < 0){Euler.adjust = 500;}//左偏
						else{Euler.adjust = -500;}//右偏
					}
					else
					{
						Euler.adjust = 0;
					}
				}
				else
				{
					Euler.adjust = 0;
				}

				if(Front_DIS <= 0)
				{
					Car_Motion.VxTarget = -0.03;
				}
				else
				{
					if(Front_DIS <= 10)
					{
						Car_Motion.VxTarget = 0;
						Mission.state = 0;
						Mission.num = 0;
						printf("DONE\n");
					}
					else if(Front_DIS <= 60)
					{
						Car_Motion.VxTarget = 0.03;
					}
					else if(Front_DIS <= 150)
					{
						Car_Motion.VxTarget = 0.08;
					}
					else if(Front_DIS <= 200)
					{
						Car_Motion.VxTarget = 0.12;
					}
					else
					{
						Car_Motion.VxTarget = 0.16;
					}
					line1:					
				}
			}
		}
		else if(Mission.num == 2)
		{
			Euler.yaw_Target = Mission.parameter2 * 182;
			vTaskDelay(200);
			if((Euler.err < 500) && (Euler.err > -500))
			{
				vTaskDelay(600);
				printf("DONE\n");
				Mission.state = 0;
				Mission.num = 0;
			}
			
		}
		else if(Mission.num == 3)
		{
			int16_t offset[2];
			int16_t err;
			uint8_t found = 0;
			Euler.adjust = -4000;

			vTaskDelay(200);
			while((Euler.adjusterr >200) || (Euler.adjusterr <-200)){;}
			printf("1\n");
			vTaskDelay(200);
			Euler.adjust = 2500;//从左到右
			vTaskDelay(200);
			while((Euler.adjusterr >200) || (Euler.adjusterr <-200))
			{	
				err = Lazer.Side_Front - Lazer.Side_Back;
				if((err <= 5) && (err >= -5) && (found == 0))
				{
					found = 1;
					offset[0] = Euler.yaw - Euler.yaw_Target;
					printf("2\n");
				}
			}
			vTaskDelay(200);
			Euler.adjust = -2500;//从右到左
			vTaskDelay(200);
			found = 0;
			while((Euler.adjusterr >200) || (Euler.adjusterr <-200))
			{	
				err = Lazer.Side_Front - Lazer.Side_Back;
				if((err <= 5) && (err >= -5) && (found == 0))
				{
					found = 1;
					offset[1] = Euler.yaw - Euler.yaw_Target;
					printf("3\n");
				}
			}
			vTaskDelay(200);
			Euler.yaw_offset = (offset[0] + offset[1]) / 2;
			Euler.adjust = 0;
			while((Euler.adjusterr >200) || (Euler.adjusterr <-200)){;}
			vTaskDelay(600);
			printf("DONE\n");
			Mission.state = 0;
			Mission.num = 0;
			
		}
		
		
		
		vTaskDelay(10);
	}
}
void Key_task(void *pvParameters)
{
	while(1)
	{
		uint8_t KeyNum = 0;
		KeyNum = Key_Get();
		
		if(KeyNum == 1)
		{
			BEEP(1);
			if(Light_Switch)
			{
				Light(0);
				Light_Switch = 0;
			}
			else 
			{
				Light(4);
				Light_Switch = 1;
			}
		}
		else if(KeyNum == 2)
		{
			BEEP(2);
			if(Servo_Angle < 70)
			{
				Servo_SetAngle(90);
				Servo_Angle = 90;
			}
			else if(Servo_Angle > 70)
			{
				Servo_SetAngle(30);
				Servo_Angle = 30;
			}
		}

		vTaskDelay(50);
	}
}

void basic_task(void *pvParameters)
{
	static uint8_t d10;
	while(1)
	{
		d10 ++;
		vTaskDelay(20);
			OLED_ShowNum(5,1,Car_Motion.Vx * 100,5);
		vTaskDelay(20);
			OLED_ShowNum(5,2,Car_Motion.Vz * 100,5);
		vTaskDelay(20);
			OLED_ShowNum(6,3,Euler.yaw,5);
		vTaskDelay(20);
			OLED_ShowNum(15,1,Lazer.Front,5);
		vTaskDelay(20);
			OLED_ShowNum(15,2,Lazer.Side_Front,5);
			//OLED_ShowNum(15,2,Lazer.Side_Average*100,5);
		vTaskDelay(20);
			OLED_ShowNum(15,3,Lazer.Side_Back,5);
			//OLED_ShowNum(15,3,Lazer.Factor,5);
		if(d10 >= 10)
		{
			LED1_Turn();
			LED2_Turn();
			d10 = 0;
		}
	}
}


void tcs_task(void *pvParameters)
{
 	while(1)
	{
		if(time2_cntr>=100) //200 //0.2s
			{
				time2_cntr=0;
				TCS34725_GetRawData(&rgb,20);  
				RGBtoHSL(&rgb,&hsl);
				//printf("H=%d S=%d L=%d\r\n",hsl.h,hsl.s,hsl.l);
				//printf("R=%d G=%d B=%d C=%d\r\n",rgb.r,rgb.g,rgb.b,rgb.c);
				if(hsl.h >= 15 && hsl.h <= 30 && hsl.s >= 110 && hsl.s <= 150 && hsl.l >= 30 && hsl.l <= 50)
       {     
					if (previous_color != 1)
					{
            printf("1\r\n");  // red
            previous_color = 1; 
					}
					else previous_color = 1; 
       }      
        else if (hsl.h >= 80 && hsl.h <= 120 && hsl.s >= 50&& hsl.s <= 80&& hsl.l >= 15 && hsl.l <= 40)
       {
          if (previous_color != 2) 
          {
              printf("2\r\n");  // green
              previous_color = 2;  
          }
					else previous_color = 2; 
       }
         else
       {
           previous_color = 0;  
       }
		}
	}
}


void rcc_task(void *pvParameters)
{
	while(1)
	{
			status = PcdRequest(PICC_REQALL, g_ucTempbuf);
			if (status != MI_OK)
			{    
					PcdReset();
					PcdAntennaOff(); 
					PcdAntennaOn(); 
					continue;
			}
			status = PcdAnticoll(g_ucTempbuf);
			if (status != MI_OK)
			{    
						continue;    
			}
			for(i=0;i<4;i++)
			{
					temp=g_ucTempbuf[i];
					printf("%X",temp);
			}
			status = PcdSelect(g_ucTempbuf);
			if (status != MI_OK)
			{    
					continue;    
			}
		printf("\r\n");		 		        
		PcdHalt();  
	}
}
	
void LeftLazer_task(void *pvParameters)
{
	int16_t buffer;
	static uint8_t D10;
	while(1)
	{
		D10 ++;
		buffer = Side_Range(1) + Lazer.Side_Front_Offset;
		if (buffer > 180)
			Lazer.Side_Front = 250;
		else 
			Lazer.Side_Front = filter1(buffer);

		//printf("\r\n Current Range:%d mm",Side_Range(3));
		buffer = Side_Range(2) + Lazer.Side_Back_Offset;
		if (buffer > 180)
			Lazer.Side_Back = 250;
		else 
			Lazer.Side_Back = filter2(buffer);
		//printf("\r\n Current Range:%d mm",Side_Range(1));
		vTaskDelay(25);		
		if(D10 >= 10)
		{
			D10 = 0;
			//LED3_Turn();
		}
	}
}


void USART2_IRQHandler(void)
{
	if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET)
	{
		uint8_t i,val_counter = 0;
		Master.Rx_buff = USART_ReceiveData(USART2);
		if(Master.Rx_Check == 1)//当发现包头
		{
			Master.Rx_String[Master.Rx_Flag++] = Master.Rx_buff;  //逐字接收字符
			if(Master.Rx_Flag >= 30)
			{
				memset(Master.Rx_String,0x00,sizeof(Master.Rx_buff)); //清空接收字符串
				Master.Rx_Flag = 0; //清空计数器			
				Master.Rx_Check = 0;
			}
			else if(Master.Rx_String[Master.Rx_Flag-1] == '#')//当收到包尾
			{
				for(i=0;i<=40;i++)
				{
					Master.Rx_String_Copy[i] = Master.Rx_String[i];
					Master.Rx_String[i] = 0;
				}
				Master.RX_OK = 1;
				memset(Master.Rx_String,0x00,sizeof(Master.Rx_buff)); //清空接收字符串
				Master.Rx_Flag = 0; //清空计数器				
				Master.Rx_Check = 0;
			}
		}
		else
		{
			if(Master.Rx_buff == '@')
			{
				Master.Rx_String[Master.Rx_Flag++] = Master.Rx_buff;  //接收字符
				Master.Rx_Check = 1;
			}
			else
			{
				Master.Rx_Flag = 0;
			}
		}
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
	}
}
void UART4_IRQHandler(void)
{
	if (USART_GetITStatus(UART4, USART_IT_RXNE) == SET)
	{
		uint8_t i,val_counter = 0;
		Slave.Rx_buff = USART_ReceiveData(UART4);
		if(Slave.Rx_Check == 1)//当发现包头
		{
			Slave.Rx_String[Slave.Rx_Flag++] = Slave.Rx_buff;  //逐字接收字符
			if(Slave.Rx_Flag >= 30)
			{
				memset(Slave.Rx_String,0x00,sizeof(Slave.Rx_buff)); //清空接收字符串
				Slave.Rx_Flag = 0; //清空计数器			
				Slave.Rx_Check = 0;
			}
			else if(Slave.Rx_String[Slave.Rx_Flag-1] == '#')//当收到包尾
			{
				for(i=0;i<=40;i++)
				{
					Slave.Rx_String_Copy[i] = Slave.Rx_String[i];
					Slave.Rx_String[i] = 0;
				}
				Slave.RX_OK = 1;
				memset(Slave.Rx_String,0x00,sizeof(Slave.Rx_buff)); //清空接收字符串
				Slave.Rx_Flag = 0; //清空计数器				
				Slave.Rx_Check = 0;
			}
		}
		else
		{
			if(Slave.Rx_buff == '@')
			{
				Slave.Rx_String[Slave.Rx_Flag++] = Slave.Rx_buff;  //接收字符
				Slave.Rx_Check = 1;
			}
			else
			{
				Slave.Rx_Flag = 0;
			}
		}
		USART_ClearITPendingBit(UART4, USART_IT_RXNE);
	}
}


void USART3_IRQHandler(void)
{
	if (USART_GetITStatus(USART3, USART_IT_RXNE) == SET)
	{
		MPU.Rx_buff = USART_ReceiveData(USART3);
		if(MPU.Rx_Check == 1)//当发现包头
		{			
			MPU.Rx_String[MPU.Rx_Flag++] = MPU.Rx_buff;
			if(MPU.Rx_Flag > 10)
			{
				if(MPU.Rx_String[1] == 0x53)//如果是角度
				{
					Euler.yaw = (MPU.Rx_String[7] << 8)+ MPU.Rx_String[6];
					if(Euler.yaw_offset_get == 0){Euler.yaw_offset = Euler.yaw;Euler.yaw_offset_get = 1;}
					
				}
				else if(MPU.Rx_String[1] == 0x52)//如果是角速度
				{
					Euler.GYO = (MPU.Rx_String[7] << 8)+ MPU.Rx_String[6];
				}
				memset(MPU.Rx_String,0x00,sizeof(MPU.Rx_buff)); //清空接收字符串
				MPU.Rx_Flag = 0; //清空计数器
				MPU.Rx_Check = 0;
			}
			else if(MPU.Rx_Flag >= 45)
			{
				memset(MPU.Rx_String,0x00,sizeof(MPU.Rx_buff)); //清空接收字符串
				MPU.Rx_Flag = 0; //清空计数器				
				MPU.Rx_Check = 0;
			}			
		}
		else
		{
			if(MPU.Rx_buff == 0x55)//判断包头
			{
				MPU.Rx_String[MPU.Rx_Flag++] = MPU.Rx_buff;  //接收字符
				MPU.Rx_Check = 1;
			}
			else
			{
				MPU.Rx_Flag = 0;
			}
		}
		USART_ClearITPendingBit(USART3, USART_IT_RXNE);
	}
}
